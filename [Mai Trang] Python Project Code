{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6874a442-a97b-47aa-b89f-ed1091a3ed5f",
   "metadata": {},
   "source": [
    "###                                     PROJECT DATA JOB SALARIES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a2b7400f-c729-4e70-abb2-c9d54c3c2845",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "11277b0d-9382-4865-9491-22c8a393e4af",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "salaries = pd.read_csv(r'E:\\Project\\Project 2 - Job DA\\salaries.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0290d39c-cb7b-4aae-84cd-82bf9c75208a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>experience_level</th>\n",
       "      <th>employment_type</th>\n",
       "      <th>job_title</th>\n",
       "      <th>salary</th>\n",
       "      <th>salary_currency</th>\n",
       "      <th>salary_in_usd</th>\n",
       "      <th>employee_residence</th>\n",
       "      <th>remote_ratio</th>\n",
       "      <th>company_location</th>\n",
       "      <th>company_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>FT</td>\n",
       "      <td>Business Intelligence Engineer</td>\n",
       "      <td>202800</td>\n",
       "      <td>USD</td>\n",
       "      <td>202800</td>\n",
       "      <td>US</td>\n",
       "      <td>0</td>\n",
       "      <td>US</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>FT</td>\n",
       "      <td>Business Intelligence Engineer</td>\n",
       "      <td>104300</td>\n",
       "      <td>USD</td>\n",
       "      <td>104300</td>\n",
       "      <td>US</td>\n",
       "      <td>0</td>\n",
       "      <td>US</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023</td>\n",
       "      <td>MI</td>\n",
       "      <td>FT</td>\n",
       "      <td>Data Manager</td>\n",
       "      <td>60000</td>\n",
       "      <td>GBP</td>\n",
       "      <td>73824</td>\n",
       "      <td>GB</td>\n",
       "      <td>0</td>\n",
       "      <td>GB</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>MI</td>\n",
       "      <td>FT</td>\n",
       "      <td>Data Manager</td>\n",
       "      <td>55000</td>\n",
       "      <td>GBP</td>\n",
       "      <td>67672</td>\n",
       "      <td>GB</td>\n",
       "      <td>0</td>\n",
       "      <td>GB</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023</td>\n",
       "      <td>SE</td>\n",
       "      <td>FT</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>290000</td>\n",
       "      <td>USD</td>\n",
       "      <td>290000</td>\n",
       "      <td>US</td>\n",
       "      <td>0</td>\n",
       "      <td>US</td>\n",
       "      <td>M</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7969</th>\n",
       "      <td>2020</td>\n",
       "      <td>SE</td>\n",
       "      <td>FT</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>412000</td>\n",
       "      <td>USD</td>\n",
       "      <td>412000</td>\n",
       "      <td>US</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7970</th>\n",
       "      <td>2021</td>\n",
       "      <td>MI</td>\n",
       "      <td>FT</td>\n",
       "      <td>Principal Data Scientist</td>\n",
       "      <td>151000</td>\n",
       "      <td>USD</td>\n",
       "      <td>151000</td>\n",
       "      <td>US</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7971</th>\n",
       "      <td>2020</td>\n",
       "      <td>EN</td>\n",
       "      <td>FT</td>\n",
       "      <td>Data Scientist</td>\n",
       "      <td>105000</td>\n",
       "      <td>USD</td>\n",
       "      <td>105000</td>\n",
       "      <td>US</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7972</th>\n",
       "      <td>2020</td>\n",
       "      <td>EN</td>\n",
       "      <td>CT</td>\n",
       "      <td>Business Data Analyst</td>\n",
       "      <td>100000</td>\n",
       "      <td>USD</td>\n",
       "      <td>100000</td>\n",
       "      <td>US</td>\n",
       "      <td>100</td>\n",
       "      <td>US</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7973</th>\n",
       "      <td>2021</td>\n",
       "      <td>SE</td>\n",
       "      <td>FT</td>\n",
       "      <td>Data Science Manager</td>\n",
       "      <td>7000000</td>\n",
       "      <td>INR</td>\n",
       "      <td>94665</td>\n",
       "      <td>IN</td>\n",
       "      <td>50</td>\n",
       "      <td>IN</td>\n",
       "      <td>L</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7974 rows Ã— 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      work_year experience_level employment_type  \\\n",
       "0          2023               SE              FT   \n",
       "1          2023               SE              FT   \n",
       "2          2023               MI              FT   \n",
       "3          2023               MI              FT   \n",
       "4          2023               SE              FT   \n",
       "...         ...              ...             ...   \n",
       "7969       2020               SE              FT   \n",
       "7970       2021               MI              FT   \n",
       "7971       2020               EN              FT   \n",
       "7972       2020               EN              CT   \n",
       "7973       2021               SE              FT   \n",
       "\n",
       "                           job_title   salary salary_currency  salary_in_usd  \\\n",
       "0     Business Intelligence Engineer   202800             USD         202800   \n",
       "1     Business Intelligence Engineer   104300             USD         104300   \n",
       "2                       Data Manager    60000             GBP          73824   \n",
       "3                       Data Manager    55000             GBP          67672   \n",
       "4                     Data Scientist   290000             USD         290000   \n",
       "...                              ...      ...             ...            ...   \n",
       "7969                  Data Scientist   412000             USD         412000   \n",
       "7970        Principal Data Scientist   151000             USD         151000   \n",
       "7971                  Data Scientist   105000             USD         105000   \n",
       "7972           Business Data Analyst   100000             USD         100000   \n",
       "7973            Data Science Manager  7000000             INR          94665   \n",
       "\n",
       "     employee_residence  remote_ratio company_location company_size  \n",
       "0                    US             0               US            L  \n",
       "1                    US             0               US            L  \n",
       "2                    GB             0               GB            M  \n",
       "3                    GB             0               GB            M  \n",
       "4                    US             0               US            M  \n",
       "...                 ...           ...              ...          ...  \n",
       "7969                 US           100               US            L  \n",
       "7970                 US           100               US            L  \n",
       "7971                 US           100               US            S  \n",
       "7972                 US           100               US            L  \n",
       "7973                 IN            50               IN            L  \n",
       "\n",
       "[7974 rows x 11 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "salaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "474c2d7a-9dc9-46cc-8c92-4cbe767f9c33",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# work_year\n",
    "# experience year: EN: Entry-level/ Junior, MI: Mid-level/ Intermediate, SE: Senior-level / Expert, EX: Executive-level / Director\n",
    "# employment_type: Part-time: PT, Full-time: FT, Contract: CT, Freelance: FL\n",
    "# job_title\n",
    "# salary\n",
    "# salary_currency \n",
    "# salary_in_usd\n",
    "# employee_residence: \n",
    "# remote_ratio: 0: No remote work (less than 20%), 50: Partially remote/hybrid, 100: Fully remote (more than 80%)\n",
    "# company_location: \n",
    "# company_size: S: less than 50 employees (small), M: 50 to 250 employees (medium), L: more than 250 employees (large)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4dd9f9c7-8230-430e-a5d3-e84e0ec9a164",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(7974, 11)\n"
     ]
    }
   ],
   "source": [
    "# Shape of table\n",
    "print(salaries.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fe82ed4a-0750-4cc9-bbf2-7eb57f6c33d9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of       work_year experience_level employment_type  \\\n",
       "0          2023               SE              FT   \n",
       "1          2023               SE              FT   \n",
       "2          2023               MI              FT   \n",
       "3          2023               MI              FT   \n",
       "4          2023               SE              FT   \n",
       "...         ...              ...             ...   \n",
       "7969       2020               SE              FT   \n",
       "7970       2021               MI              FT   \n",
       "7971       2020               EN              FT   \n",
       "7972       2020               EN              CT   \n",
       "7973       2021               SE              FT   \n",
       "\n",
       "                           job_title   salary salary_currency  salary_in_usd  \\\n",
       "0     Business Intelligence Engineer   202800             USD         202800   \n",
       "1     Business Intelligence Engineer   104300             USD         104300   \n",
       "2                       Data Manager    60000             GBP          73824   \n",
       "3                       Data Manager    55000             GBP          67672   \n",
       "4                     Data Scientist   290000             USD         290000   \n",
       "...                              ...      ...             ...            ...   \n",
       "7969                  Data Scientist   412000             USD         412000   \n",
       "7970        Principal Data Scientist   151000             USD         151000   \n",
       "7971                  Data Scientist   105000             USD         105000   \n",
       "7972           Business Data Analyst   100000             USD         100000   \n",
       "7973            Data Science Manager  7000000             INR          94665   \n",
       "\n",
       "     employee_residence  remote_ratio company_location company_size  \n",
       "0                    US             0               US            L  \n",
       "1                    US             0               US            L  \n",
       "2                    GB             0               GB            M  \n",
       "3                    GB             0               GB            M  \n",
       "4                    US             0               US            M  \n",
       "...                 ...           ...              ...          ...  \n",
       "7969                 US           100               US            L  \n",
       "7970                 US           100               US            L  \n",
       "7971                 US           100               US            S  \n",
       "7972                 US           100               US            L  \n",
       "7973                 IN            50               IN            L  \n",
       "\n",
       "[7974 rows x 11 columns]>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Info of table\n",
    "salaries.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2b4d9388-abf7-4623-96f2-d42130ff4bd4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "work_year             0\n",
       "experience_level      0\n",
       "employment_type       0\n",
       "job_title             0\n",
       "salary                0\n",
       "salary_currency       0\n",
       "salary_in_usd         0\n",
       "employee_residence    0\n",
       "remote_ratio          0\n",
       "company_location      0\n",
       "company_size          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find NA and missing value\n",
    "salaries.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3abc59c2-645d-4ac8-82d5-138b736fa91f",
   "metadata": {},
   "source": [
    "### Theo hÆ°á»›ng tá»•ng quan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ec754c1c-9c17-474d-bcca-0217c37b2ec1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>count_experience_level_EN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>247</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  count_experience_level_EN\n",
       "0       2020                         21\n",
       "1       2021                         46\n",
       "2       2022                        115\n",
       "3       2023                        247"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group by work_year, count experience_level = EN, SE, EX\n",
    "salaries.groupby('work_year')['experience_level'].apply(lambda x: (x=='EN').sum()).reset_index(name='count_experience_level_EN')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f573f32a-459f-4fae-9457-c4fd4cefbd15",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "272df03d-68d6-4939-a288-c2d022030de6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>count_experience_level_SE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>1136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>4524</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  count_experience_level_SE\n",
       "0       2020                         19\n",
       "1       2021                         75\n",
       "2       2022                       1136\n",
       "3       2023                       4524"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group by work_year, count experience_level = EN, SE, EX\n",
    "salaries.groupby('work_year')['experience_level'].apply(lambda x: (x=='SE').sum()).reset_index(name='count_experience_level_SE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ef195f17-3574-4770-9159-dde5cb37fd48",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>count_experience_level_EX</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  count_experience_level_EX\n",
       "0       2020                          4\n",
       "1       2021                         10\n",
       "2       2022                         41\n",
       "3       2023                        190"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group by work_year, count experience_level = EN, SE, EX\n",
    "salaries.groupby('work_year')['experience_level'].apply(lambda x: (x=='EX').sum()).reset_index(name='count_experience_level_EX')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "12c6d673",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>count_experience_level_MI</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>358</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>1070</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  count_experience_level_MI\n",
       "0       2020                         31\n",
       "1       2021                         87\n",
       "2       2022                        358\n",
       "3       2023                       1070"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group by work_year, count experience_level = EN, SE, EX\n",
    "salaries.groupby('work_year')['experience_level'].apply(lambda x: (x=='MI').sum()).reset_index(name='count_experience_level_MI')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba4ce710-6f87-46a7-b77b-8a96e36f3e0c",
   "metadata": {},
   "source": [
    "### -------------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b05c1949-eb50-4e15-a144-24676b4f0a16",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>count_experience_employment_type_FT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>1636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>6019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  count_experience_employment_type_FT\n",
       "0       2020                                   69\n",
       "1       2021                                  208\n",
       "2       2022                                 1636\n",
       "3       2023                                 6019"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group by work_year, count experience_type = FT, PT, CT, FL\n",
    "salaries.groupby('work_year')['employment_type'].apply(lambda x: (x=='FT').sum()).reset_index(name='count_experience_employment_type_FT')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "f9a7265f-f400-4921-8aa6-68f61d5cfb88",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>count_experience_employment_type_PT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  count_experience_employment_type_PT\n",
       "0       2020                                    2\n",
       "1       2021                                    4\n",
       "2       2022                                    6\n",
       "3       2023                                    1"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group by work_year, count experience_type = FT, PT, CT, FL\n",
    "salaries.groupby('work_year')['employment_type'].apply(lambda x: (x=='PT').sum()).reset_index(name='count_experience_employment_type_PT')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "33ca70cd-c810-4134-b20f-f1e476929105",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>count_experience_employment_type_CT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  count_experience_employment_type_CT\n",
       "0       2020                                    3\n",
       "1       2021                                    3\n",
       "2       2022                                    4\n",
       "3       2023                                    8"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group by work_year, count experience_type = FT, PT, CT, FL\n",
    "salaries.groupby('work_year')['employment_type'].apply(lambda x: (x=='CT').sum()).reset_index(name='count_experience_employment_type_CT')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9f89ef56-7d82-43b9-845e-ec6f69097c54",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>count_experience_employment_type_FL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  count_experience_employment_type_FL\n",
       "0       2020                                    1\n",
       "1       2021                                    3\n",
       "2       2022                                    4\n",
       "3       2023                                    3"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group by work_year, count experience_type = FT, PT, CT, FL\n",
    "salaries.groupby('work_year')['employment_type'].apply(lambda x: (x=='FL').sum()).reset_index(name='count_experience_employment_type_FL')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e7d8bd8-cd12-4904-9c1f-518c6e6179c7",
   "metadata": {},
   "source": [
    "### -------------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f894cf78-ac80-4dba-a435-29ae7e8b7086",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data Engineer                1888\n",
      "Data Scientist               1688\n",
      "Data Analyst                 1188\n",
      "Machine Learning Engineer     816\n",
      "Applied Scientist             226\n",
      "                             ... \n",
      "Sales Data Analyst              1\n",
      "Data Quality Engineer           1\n",
      "Deep Learning Researcher        1\n",
      "Data DevOps Engineer            1\n",
      "Manager Data Management         1\n",
      "Name: job_title, Length: 118, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Number of employee by job_title\n",
    "employee_count_by_jobtitle = salaries['job_title'].value_counts()\n",
    "print(employee_count_by_jobtitle)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b2f3081-b270-4eaa-a342-df7b52ae996c",
   "metadata": {
    "tags": []
   },
   "source": [
    "### -------------------------------------------------------------------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "34617593-b699-4907-b6b5-540e4cd614c3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>job_title</th>\n",
       "      <th>mean_job_title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AI Architect</td>\n",
       "      <td>255193.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AI Developer</td>\n",
       "      <td>141041.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AI Engineer</td>\n",
       "      <td>176925.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AI Programmer</td>\n",
       "      <td>68817.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AI Research Engineer</td>\n",
       "      <td>70117.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>Sales Data Analyst</td>\n",
       "      <td>60000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>Software Data Engineer</td>\n",
       "      <td>111627.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>Staff Data Analyst</td>\n",
       "      <td>79917.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>Staff Data Scientist</td>\n",
       "      <td>134500.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>Staff Machine Learning Engineer</td>\n",
       "      <td>185000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                           job_title  mean_job_title\n",
       "0                       AI Architect        255193.6\n",
       "1                       AI Developer        141041.7\n",
       "2                        AI Engineer        176925.7\n",
       "3                      AI Programmer         68817.4\n",
       "4               AI Research Engineer         70117.0\n",
       "..                               ...             ...\n",
       "113               Sales Data Analyst         60000.0\n",
       "114           Software Data Engineer        111627.7\n",
       "115               Staff Data Analyst         79917.0\n",
       "116             Staff Data Scientist        134500.0\n",
       "117  Staff Machine Learning Engineer        185000.0\n",
       "\n",
       "[118 rows x 2 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Group by job title , Average salary\n",
    "salaries_groupby_jobtitle = salaries.groupby('job_title')['salary_in_usd'].mean().round(1).reset_index().rename(columns={'salary_in_usd': 'mean_job_title'})\n",
    "salaries_groupby_jobtitle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "075fb403-f050-47f4-acbf-0e8baa23dea8",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>job_title</th>\n",
       "      <th>mean_job_title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Analytics Engineering Manager</td>\n",
       "      <td>399880.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Data Science Tech Lead</td>\n",
       "      <td>375000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Managing Director Data Science</td>\n",
       "      <td>300000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AWS Data Architect</td>\n",
       "      <td>258000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AI Architect</td>\n",
       "      <td>255193.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>Data DevOps Engineer</td>\n",
       "      <td>53984.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>Insight Analyst</td>\n",
       "      <td>47673.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>Compliance Data Analyst</td>\n",
       "      <td>45000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116</th>\n",
       "      <td>Principal Data Architect</td>\n",
       "      <td>38154.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>Data Quality Engineer</td>\n",
       "      <td>23753.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>118 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          job_title  mean_job_title\n",
       "0     Analytics Engineering Manager        399880.0\n",
       "1            Data Science Tech Lead        375000.0\n",
       "2    Managing Director Data Science        300000.0\n",
       "3                AWS Data Architect        258000.0\n",
       "4                      AI Architect        255193.6\n",
       "..                              ...             ...\n",
       "113            Data DevOps Engineer         53984.0\n",
       "114                 Insight Analyst         47673.9\n",
       "115         Compliance Data Analyst         45000.0\n",
       "116        Principal Data Architect         38154.0\n",
       "117           Data Quality Engineer         23753.0\n",
       "\n",
       "[118 rows x 2 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Arrange descending\n",
    "salaries_groupby_jobtitle = (salaries_groupby_jobtitle.sort_values(by='mean_job_title', ascending=False).reset_index(drop=True))\n",
    "salaries_groupby_jobtitle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ca7e5e84-236b-4a85-9cae-c6f43fc561b5",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "remote_ratio   0    50    100\n",
      "work_year                    \n",
      "2020            18   21    36\n",
      "2021            29   73   116\n",
      "2022           709   61   880\n",
      "2023          3925   61  2045\n"
     ]
    }
   ],
   "source": [
    "# Use value_counts to count in column 'remote' by year\n",
    "remote_counts = salaries.groupby('work_year')['remote_ratio'].value_counts().unstack(fill_value=0)\n",
    "\n",
    "# Add value 0, 50, 100 in DataFrame if they did't exist\n",
    "if 0 not in remote_counts.columns:\n",
    "    remote_counts[0] = 0\n",
    "if 50 not in remote_counts.columns:\n",
    "    remote_counts[50] = 0\n",
    "if 100 not in remote_counts.columns:\n",
    "    remote_counts[100] = 0\n",
    "\n",
    "# Print\n",
    "print(remote_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "46022cf9-6c70-4d2c-babb-4f73d2e39a60",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "company_size    L     M   S\n",
      "work_year                  \n",
      "2020           34    17  24\n",
      "2021          124    52  42\n",
      "2022          191  1410  49\n",
      "2023          351  5629  51\n"
     ]
    }
   ],
   "source": [
    "# Use value_counts to count value in 'remote' column by year\n",
    "company_counts = salaries.groupby('work_year')['company_size'].value_counts().unstack(fill_value=0)\n",
    "\n",
    "# Add value S, M, L in DataFrame if they didn't exist\n",
    "if 'S' not in company_counts.columns:\n",
    "    company_counts[S] = S\n",
    "if 'M' not in company_counts.columns:\n",
    "    company_counts[M] = S\n",
    "if 'L' not in company_counts.columns:\n",
    "    company_counts[L] = S\n",
    "\n",
    "# Print\n",
    "print(company_counts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0e603353-8e79-41ce-8fcf-711b87f0375e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>count DA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>890</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  count DA\n",
       "0       2020         6\n",
       "1       2021        20\n",
       "2       2022       272\n",
       "3       2023       890"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filter job_title = 'Data Analyst'\n",
    "data_analyst_counts = salaries[salaries['job_title'] == 'Data Analyst']\n",
    "\n",
    "# Group by work_year vÃ  count Data Analyst\n",
    "DA_counts = data_analyst_counts.groupby('work_year').size().reset_index(name='count DA')\n",
    "DA_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9682fed2-dc9d-4c03-accc-c90c8928c55a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>Average DA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>60911.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>78258.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>108658.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>111341.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  Average DA\n",
       "0       2020     60911.0\n",
       "1       2021     78258.0\n",
       "2       2022    108658.0\n",
       "3       2023    111341.0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Filter job_title = 'Data Analyst'\n",
    "data_analyst_salaries = salaries[salaries['job_title'] == 'Data Analyst']\n",
    "\n",
    "# Group by work_year and calculate average (salary_in_usd)\n",
    "salaries_groupby_DA = data_analyst_salaries.groupby('work_year')['salary_in_usd'].mean().round().reset_index(name='Average DA')\n",
    "salaries_groupby_DA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "76113a32",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>work_year</th>\n",
       "      <th>Average DA_US</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020</td>\n",
       "      <td>82666.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021</td>\n",
       "      <td>94166.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2022</td>\n",
       "      <td>115916.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023</td>\n",
       "      <td>114989.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   work_year  Average DA_US\n",
       "0       2020        82666.7\n",
       "1       2021        94166.7\n",
       "2       2022       115916.5\n",
       "3       2023       114989.8"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## Filter job_title = 'Data Analyst' and employee_residence = 'US'\n",
    "data_analyst_salaries_VN = salaries[(salaries['job_title'] == 'Data Analyst') & (salaries['employee_residence'] == 'US')]\n",
    "\n",
    "# Group by work_year, employee_residence = 'US' and calculate average (salary_in_usd) \n",
    "salaries_groupby_DA_VN = data_analyst_salaries_VN.groupby('work_year')['salary_in_usd'].mean().round(1).reset_index(name='Average DA_US')\n",
    "salaries_groupby_DA_VN"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
